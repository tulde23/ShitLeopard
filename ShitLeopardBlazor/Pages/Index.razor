@page "/"
@inject HttpClient Http

<div class="flex flex-col h-screen justify-center items-center">
    <div class="flex-0 flex flex-col justify-start  items-start">
        <div class="flex-0 flex flex-col justify-start justify-items-stretch m-4">
            <img src="./images/logo.png" class="logo p-2" />
            <input type="text" max="255" maxlength="255" class="text-black font-semibold rounded p-2"
                   placeholder="Search you greasy bastard..."
                   @onkeyup="@invokeOnKeyChange" />


            @if (this.loading)
            {
                <div class="fixed flex flex-col h-screen justify-center items-cente w-100">
                    <div class="flex-0 flex flex-col justify-start  items-start">
                        <div class="bg-white flex space-x-2 p-5 rounded-full justify-center items-center ">
                                <div class="bg-blue-600 p-2  w-4 h-4 rounded-full animate-bounce blue-circle"></div>
                                <div class="bg-green-600 p-2 w-4 h-4 rounded-full animate-bounce green-circle"></div>
                                <div class="bg-red-600 p-2  w-4 h-4 rounded-full animate-bounce red-circle"></div>
                        </div>
                     </div>
                 </div>
                }
                        <div class="p-2 mt-4 @( this.searchResults?.Any() == true ? "results-full" : "results")">
                            @if (searchResults?.Any() == true)
                            {
                                foreach (var quote in searchResults)
                                {
                                    <div class="mb-4 p-2">
                                        <p>
                                            @quote.showName
                                        </p>
                                        Season @quote.seasonId, Episode @quote.episodeNumber - @quote.episodeTitle

                                        <p>
                                            @quote.body
                                        </p>
                                    </div>
                                }
                            }
                        </div>
                    </div>

                </div>


            </div>
@code {
    private string text;
    private bool loading = false;
    private bool queued = false;
    public string Text
    {
        get => text;
        set
        {
            if (value != text)
            {
                text = value;
                InvokeAsync(async () => await SearchAsync(text));
            }
        }
    }
    private SearchResult[] searchResults;
    private System.Text.StringBuilder _builder = new System.Text.StringBuilder();


    private async Task SearchAsync(string text)
    {
        if (!string.IsNullOrWhiteSpace(text))
        {

            loading = true;

            searchResults = await Http.GetFromJsonAsync<SearchResult[]>("/sample-data/search.json");
            loading = false;
            await InvokeAsync(StateHasChanged);
        }
    }
    private string value { get; set; }
    private void invokeSearch(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        Text = (string)args.Value;
    }
    private async Task invokeOnKeyChange(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs args)
    {
        if( Char.TryParse(args.Key, out char result) && (Char.IsLetterOrDigit(result) || Char.IsPunctuation(result) ) )
        {
            _builder.Append(args.Key);
            await Task.Delay(750);
            this.Text = _builder.ToString();
            _builder = new System.Text.StringBuilder();
        }



    }
}